#include <ESP32Servo.h>
#include <ps5Controller.h>

Servo servoFrontLeft, servoFrontRight, servoRearLeft, servoRearRight;

#define SERVO_FRONT_LEFT_PIN 19
#define SERVO_FRONT_RIGHT_PIN 21
#define SERVO_REAR_LEFT_PIN 22
#define SERVO_REAR_RIGHT_PIN 23
#define FREEZE_BUTTON_PIN 16
#define LED_PIN 13 

unsigned long lastTimeStamp = 0;
bool autonomousMode = false;
bool isFrozen = false;
unsigned long freezeStartTime = 0;
unsigned long autonomousStartTime = 0;

void setup() {
  servoFrontLeft.attach(SERVO_FRONT_LEFT_PIN);
  servoFrontRight.attach(SERVO_FRONT_RIGHT_PIN);
  servoRearLeft.attach(SERVO_REAR_LEFT_PIN);
  servoRearRight.attach(SERVO_REAR_RIGHT_PIN);
  
  pinMode(FREEZE_BUTTON_PIN, INPUT_PULLUP); 
  pinMode(LED_PIN, OUTPUT); 
  
  Serial.begin(115200);
  
  ps5.attach(notify);
  ps5.attachOnConnect(onConnect);
  ps5.attachOnDisconnect(onDisConnect);
  ps5.begin("84:30:95:de:d1:a2");
  
  while (!ps5.isConnected()) {
    Serial.println("PS5 controller not found");
    delay(300);
  }
  Serial.println("Ready.");
}

void loop() {
  if (ps5.Options() && millis() - lastTimeStamp > 50) {
    autonomousMode = true;
    autonomousStartTime = millis();
    lastTimeStamp = millis();
  }

  if (digitalRead(FREEZE_BUTTON_PIN) == LOW && !isFrozen) {
    isFrozen = true;
    freezeStartTime = millis();
    Serial.println("Robot frozen!");
    digitalWrite(LED_PIN, HIGH);
  }

  if (isFrozen && millis() - freezeStartTime >= 15000) {
    isFrozen = false;
    Serial.println("Robot unfrozen!");
    digitalWrite(LED_PIN, LOW);
  }
  
  if (autonomousMode && millis() - autonomousStartTime >= 20000) {
    autonomousMode = false;
    Serial.println("Switching to driver control.");
  }

  if (!isFrozen) {
    if (autonomousMode) {
      runAutonomous();
    } else {
      controlMotors();
    }
  }
}

void controlMotors() {
  int leftStickY = ps5.LStickY();
  int leftStickX = ps5.LStickX();
  int rightStickX = ps5.RStickX();

  int frontLeftServoValue = map(leftStickY + leftStickX + rightStickX, -128, 127, 250, 2750);
  int frontRightServoValue = map(leftStickY - leftStickX - rightStickX, -128, 127, 250, 2750);
  int rearLeftServoValue = map(leftStickY - leftStickX + rightStickX, -128, 127, 2750, 250);
  int rearRightServoValue = map(leftStickY + leftStickX - rightStickX, -128, 127, 2750, 250);

  servoFrontLeft.writeMicroseconds(frontLeftServoValue);
  servoFrontRight.writeMicroseconds(frontRightServoValue);
  servoRearLeft.writeMicroseconds(rearLeftServoValue);
  servoRearRight.writeMicroseconds(rearRightServoValue);
}

void runAutonomous() {
  Serial.println("Running autonomous mode"); // Debug statement
  servoFrontLeft.writeMicroseconds(2000);
  servoFrontRight.writeMicroseconds(2000);
  servoRearLeft.writeMicroseconds(2000);
  servoRearRight.writeMicroseconds(2000);
}

void notify() {
  if (millis() - lastTimeStamp >= 500) {
    Serial.printf("LStickX: %d, LStickY: %d, RStickX: %d, RStickY: %d\n", 
                  ps5.LStickX(), ps5.LStickY(), ps5.RStickX(), ps5.RStickY());
    lastTimeStamp = millis();
  }
}

void onConnect() {
  Serial.println("Connected!");
}

void onDisConnect() {
  Serial.println("Disconnected!");
}
