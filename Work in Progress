#include <ESP32Servo.h>
#include <ps5Controller.h>

// Define servo objects for each wheel
Servo servoFrontLeft;
Servo servoFrontRight;
Servo servoRearLeft;
Servo servoRearRight;

// Define pin numbers for each servo
#define SERVO_FRONT_LEFT_PIN 19
#define SERVO_FRONT_RIGHT_PIN 20
#define SERVO_REAR_LEFT_PIN 21
#define SERVO_REAR_RIGHT_PIN 22
#define FREEZE_BUTTON_PIN 23 // Define the pin for the freeze button
#define LED_PIN 13 // Define the pin for the LED

// Variables to manage timing and states
unsigned long lastTimeStamp = 0;
bool autonomousMode = false;
bool isFrozen = false;
unsigned long freezeStartTime = 0;
unsigned long autonomousStartTime = 0;

void setup() {
  // Attach servos to their respective pins
  servoFrontLeft.attach(SERVO_FRONT_LEFT_PIN);
  servoFrontRight.attach(SERVO_FRONT_RIGHT_PIN);
  servoRearLeft.attach(SERVO_REAR_LEFT_PIN);
  servoRearRight.attach(SERVO_REAR_RIGHT_PIN);
  
  pinMode(FREEZE_BUTTON_PIN, INPUT_PULLUP); // Initialize the freeze button pin
  pinMode(LED_PIN, OUTPUT); // Initialize the LED pin as output
  
  // Initialize serial communication for debugging
  Serial.begin(115200);
  
  // Initialize PS5 controller and attach event handlers
  ps5.attach(notify);
  ps5.attachOnConnect(onConnect);
  ps5.attachOnDisconnect(onDisConnect);
  ps5.begin("24:a6:fa:ca:d0:75"); // your PS5 controller MAC address
  
  // Wait for the PS5 controller to connect
  while (!ps5.isConnected()) {
    Serial.println("PS5 controller not found");
    delay(300);
  }
  Serial.println("Ready.");
}

void loop() {
  static unsigned long lastDebounceTime = 0; // Debounce timing for Options button
  
  if (ps5.Options() && (millis() - lastDebounceTime > 50)) { // Debounce with a shorter delay
    autonomousMode = true; // Set autonomous mode flag
    autonomousStartTime = millis(); // Record the start time of autonomous mode
    lastDebounceTime = millis(); // Reset debounce timer
  }
  
  // Check if the freeze button is pressed
  if (digitalRead(FREEZE_BUTTON_PIN) == LOW && !isFrozen) {
    isFrozen = true; // Set frozen flag
    freezeStartTime = millis(); // Record the time when the robot was frozen
    Serial.println("Robot frozen!");
    digitalWrite(LED_PIN, HIGH); // Turn on the LED
  }
  
  // Check if the freeze duration (15 seconds) has elapsed
  if (isFrozen) {
    unsigned long elapsedTime = millis() - freezeStartTime;
    Serial.print("Time remaining: ");
    Serial.println(15 - elapsedTime / 1000); // Countdown
    if (elapsedTime >= 15000) {
      isFrozen = false; // Unfreeze the robot
      Serial.println("Robot unfrozen!");
      digitalWrite(LED_PIN, LOW); // Turn off the LED
    }
  }
  
  // Check if the autonomous period (20 seconds) has elapsed
  if (autonomousMode && millis() - autonomousStartTime >= 20000) {
    autonomousMode = false; // Switch back to driver control
    Serial.println("Switching to driver control.");
  }
  
  // Control the robot based on the current mode and state
  if (!isFrozen) {
    if (autonomousMode) {
      runAutonomous(); // Run autonomous mode
    } else {
      controlMotors(); // Run manual control mode
    }
  }
}

void controlMotors() {
  // Manual control code using PS5 controller inputs
  int leftStickY = ps5.LStickY();
  int leftStickX = ps5.LStickX();
  int rightStickX = ps5.RStickX();
  
  // Map PS5 controller inputs to servo values
  int frontLeftServoValue = map(leftStickY + leftStickX + rightStickX, -128, 127, 500, 2500);
  int frontRightServoValue = map(leftStickY - leftStickX - rightStickX, -128, 127, 500, 2500);
  int rearLeftServoValue = map(leftStickY - leftStickX + rightStickX, -128, 127, 500, 2500);
  int rearRightServoValue = map(leftStickY + leftStickX - rightStickX, -128, 127, 500, 2500);
  
  // Write the mapped values to the servos
  servoFrontLeft.writeMicroseconds(frontLeftServoValue);
  servoFrontRight.writeMicroseconds(frontRightServoValue);
  servoRearLeft.writeMicroseconds(rearLeftServoValue);
  servoRearRight.writeMicroseconds(rearRightServoValue);
}

void runAutonomous() {
  // Simple autonomous code to move forward
  servoFrontLeft.writeMicroseconds(1500);
  servoFrontRight.writeMicroseconds(1500);
  servoRearLeft.writeMicroseconds(1500);
  servoRearRight.writeMicroseconds(1500);
}

void notify() {
  // Print minimal PS5 controller inputs for debugging
  Serial.printf("LStickX: %d, LStickY: %d, RStickX: %d, RStickY: %d\n",
                ps5.LStickX(), ps5.LStickY(), ps5.RStickX(), ps5.RStickY());
  lastTimeStamp = millis();
}

void onConnect() {
  Serial.println("Connected!");
}

void onDisConnect() {
  Serial.println("Disconnected!");
}
